module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output pin_outOne, // Lights up according to FPGA output
    output pin_outTwo,
    output pin_outThree
  ) {
 
  sig rst;                  // reset signal
 
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    dff outputSig[3];
  }
 
  sig abc[10];
 
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
   
    // sets up the 3 pins to io_dip which is switch that is on io shield
    // switch on will give current
    pin_outOne = io_dip[0][0];
    pin_outTwo = io_dip[1][0];
    pin_outThree = io_dip[2][0];
    
    io_led[0][7:0] = 8h00; // turn off all LEDs
    io_led[1][7:0] = 8h00;
    io_led[2][7:0] = 8h00;
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
   
    io_seg = 8hff;          // turn segments off        
    io_sel = 4hf;           // select no digits    
   
    // led0 - A, led1 - B, led2 - C;
    // sets up led0,1,2 to light up according to whether switch on io shield is flipped
    io_led[0][0] = io_dip[0][0]; // row 1 number 1 switch = A (LED0)
    io_led[0][1] = io_dip[1][0]; // row 2 number 1 switch = B (LED1)
    io_led[0][2] = io_dip[2][0]; // row 3 number 1 switch = C (LED2)
   
    
    // the following 4 (or 5) lines will output correct LED light on LED5 and LED6
    io_led[0][5] = (io_dip[0][0] & io_dip[1][0]) | (io_dip[1][0] & io_dip[2][0]) | (io_dip[0][0] & io_dip[2][0]);
    abc[0] = io_dip[0][0] + io_dip[1][0] + io_dip[2][0];
    // this if statement determines whether Cout led lights up or not
    if(abc[0]==1 | abc[0] == 3) {
      io_led[0][6] = io_dip[0][0] | io_dip[1][0] | io_dip[2][0];
    }
  }
}